name: Build and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, devel]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-aarch64
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-armv7
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: ptp-trace.exe
            asset_name: ptp-trace-windows-x86_64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: ptp-trace
            asset_name: ptp-trace-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: ptp-trace
            asset_name: ptp-trace-macos-aarch64
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install Rust toolchain with target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Install Npcap SDK (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Download and extract Npcap SDK (required for compilation)
          $sdkUrl = "https://npcap.com/dist/npcap-sdk-1.13.zip"
          $sdkPath = "$env:TEMP\npcap-sdk.zip"
          $extractPath = "C:\npcap-sdk"
          Write-Host "Downloading Npcap SDK..."
          Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkPath
          Write-Host "Extracting Npcap SDK..."
          Expand-Archive -Path $sdkPath -DestinationPath $extractPath -Force

          # Verify SDK extraction
          if (Test-Path "C:\npcap-sdk\Lib\x64\wpcap.lib") {
            Write-Host "Npcap SDK installed successfully"
          } else {
            Write-Host "Error: wpcap.lib not found in SDK"
            exit 1
          }

          # Set environment variables for linking
          echo "NPCAP_SDK=C:\npcap-sdk" >> $env:GITHUB_ENV
          echo "LIB=C:\npcap-sdk\Lib\x64;$env:LIB" >> $env:GITHUB_ENV
          Write-Host "Environment configured for Npcap development"

      - name: Build with cross (ARM targets)
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: cross build --release --target ${{ matrix.target }}

      - name: Build with cargo (native targets)
        if: matrix.target != 'aarch64-unknown-linux-gnu' && matrix.target != 'armv7-unknown-linux-gnueabihf'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            # Install strip tool for ARM64
            sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          elif [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            # Install strip tool for ARM32
            sudo apt-get update && sudo apt-get install -y gcc-arm-linux-gnueabihf
            arm-linux-gnueabihf-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          else
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create ZIP archives
        run: |
          cd artifacts
          zip -r ptp-trace-linux-x86_64.zip ptp-trace-linux-x86_64/
          zip -r ptp-trace-linux-aarch64.zip ptp-trace-linux-aarch64/
          zip -r ptp-trace-linux-armv7.zip ptp-trace-linux-armv7/
          zip -r ptp-trace-windows-x86_64.zip ptp-trace-windows-x86_64.exe/
          zip -r ptp-trace-macos-x86_64.zip ptp-trace-macos-x86_64/
          zip -r ptp-trace-macos-aarch64.zip ptp-trace-macos-aarch64/
          ls -la *.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/ptp-trace-linux-x86_64.zip
            artifacts/ptp-trace-linux-aarch64.zip
            artifacts/ptp-trace-linux-armv7.zip
            artifacts/ptp-trace-windows-x86_64.zip
            artifacts/ptp-trace-macos-x86_64.zip
            artifacts/ptp-trace-macos-aarch64.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
