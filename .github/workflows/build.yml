name: Build and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, devel]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev pkg-config

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-x86_64
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-aarch64
            use_cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-armv7
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ptp-trace.exe
            asset_name: ptp-trace-windows-x86_64.exe
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ptp-trace
            asset_name: ptp-trace-macos-x86_64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ptp-trace
            asset_name: ptp-trace-macos-aarch64
            use_cross: false

    steps:
      - uses: actions/checkout@v4

      - name: Debug environment
        run: |
          echo "=== System Information ==="
          echo "OS: ${{ matrix.os }}"
          echo "Target: ${{ matrix.target }}"
          echo "Use cross: ${{ matrix.use_cross }}"
          echo "Runner: $(uname -a || systeminfo | head -5)"
          echo "=========================="

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      # Linux native build dependencies
      - name: Install Linux native dependencies
        if: matrix.os == 'ubuntu-latest' && !matrix.use_cross
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev pkg-config

      # Windows dependencies - Install Npcap SDK
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          try {
            # Create directory
            Write-Host "Creating SDK directory..."
            New-Item -ItemType Directory -Path "C:\npcap-sdk" -Force | Out-Null

            # Download Npcap SDK
            Write-Host "Downloading Npcap SDK..."
            $ProgressPreference = 'SilentlyContinue'
            Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.13.zip" -OutFile "npcap-sdk.zip" -UseBasicParsing

            # Extract SDK
            Write-Host "Extracting Npcap SDK..."
            Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "C:\npcap-sdk" -Force

            # Find the correct lib directory
            $libDirs = @("C:\npcap-sdk\Lib\x64", "C:\npcap-sdk\Lib")
            $libPath = ""
            foreach ($dir in $libDirs) {
              if (Test-Path "$dir\wpcap.lib") {
                $libPath = $dir
                break
              }
            }

            if ($libPath -eq "") {
              Write-Host "Searching for wpcap.lib in all subdirectories..."
              $foundLib = Get-ChildItem -Path "C:\npcap-sdk" -Recurse -Name "wpcap.lib" | Select-Object -First 1
              if ($foundLib) {
                $libPath = Split-Path -Parent (Join-Path "C:\npcap-sdk" $foundLib)
                Write-Host "Found wpcap.lib at: $libPath"
              }
            }

            if ($libPath -ne "") {
              # Set environment variables
              Write-Host "Setting environment variables for: $libPath"
              "LIBPCAP_LIBDIR=$libPath" | Add-Content -Path $env:GITHUB_ENV
              "LIB=$libPath;$($env:LIB)" | Add-Content -Path $env:GITHUB_ENV
              Write-Host "✓ Setup complete"
            } else {
              Write-Host "❌ Could not find wpcap.lib"
              exit 1
            }
          } catch {
            Write-Host "❌ Error during Windows setup: $($_.Exception.Message)"
            exit 1
          }

      # macOS dependencies - libpcap should be available by default
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          # Ensure Xcode command line tools are installed
          xcode-select --install || true

          # Install pkg-config if not available
          if ! command -v pkg-config &> /dev/null; then
            brew install pkg-config
          fi

      # Cross-compilation setup using cross-rs
      - name: Install cross-rs for cross-compilation
        if: matrix.use_cross
        run: |
          # Install cross-rs with retry logic
          for i in {1..3}; do
            if cargo install cross --git https://github.com/cross-rs/cross; then
              break
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
          cross --version

      # Build with appropriate method
      - name: Build with cargo
        if: "!matrix.use_cross"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build with cross
        if: matrix.use_cross
        run: |
          # Build with cross-rs with verbose output
          cross build --release --target ${{ matrix.target }} --verbose
          ls -la target/${{ matrix.target }}/release/ || echo "Target directory not found"

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]] || [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            echo "Cross-compiled binary, skipping strip"
          elif command -v strip &> /dev/null; then
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || echo "Strip failed, continuing..."
          fi

          # Verify binary exists
          if [[ -f "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" ]]; then
            echo "✓ Binary built successfully: $(file target/${{ matrix.target }}/release/${{ matrix.artifact_name }})"
            ls -la target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          else
            echo "❌ Binary not found!"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create ZIP archives
        run: |
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              cd "$dir"
              # Find the binary file (exclude .exe for now)
              if ls ptp-trace.exe &> /dev/null; then
                zip -j "../${dir%/}.zip" ptp-trace.exe
              elif ls ptp-trace &> /dev/null; then
                zip -j "../${dir%/}.zip" ptp-trace
              fi
              cd ..
            fi
          done
          ls -la *.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
