name: Build and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, devel]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev pkg-config

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-x86_64
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-aarch64
            use_cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: ptp-trace
            asset_name: ptp-trace-linux-armv7
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ptp-trace.exe
            asset_name: ptp-trace-windows-x86_64.exe
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ptp-trace
            asset_name: ptp-trace-macos-x86_64
            use_cross: false
          - os: macos-13
            target: aarch64-apple-darwin
            artifact_name: ptp-trace
            asset_name: ptp-trace-macos-aarch64
            use_cross: false

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      # Linux native build dependencies
      - name: Install Linux native dependencies
        if: matrix.os == 'ubuntu-latest' && !matrix.use_cross
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev pkg-config

      # Windows dependencies - Install Npcap SDK
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Download and install Npcap
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-1.79.exe" -OutFile "npcap-installer.exe"
          Start-Process -FilePath "npcap-installer.exe" -ArgumentList "/S" -Wait

          # Download Npcap SDK
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.13.zip" -OutFile "npcap-sdk.zip"
          Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "C:\npcap-sdk"

          # Set environment variables
          echo "LIB=C:\npcap-sdk\Lib\x64;$env:LIB" >> $env:GITHUB_ENV
          echo "LIBPCAP_LIBDIR=C:\npcap-sdk\Lib\x64" >> $env:GITHUB_ENV

      # macOS dependencies - libpcap should be available by default
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
        run: |
          # Ensure Xcode command line tools are installed
          xcode-select --install || true

          # Install pkg-config if not available
          if ! command -v pkg-config &> /dev/null; then
            brew install pkg-config
          fi

      # Cross-compilation setup using cross-rs
      - name: Install cross-rs for cross-compilation
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      # Build with appropriate method
      - name: Build with cargo
        if: "!matrix.use_cross"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build with cross
        if: matrix.use_cross
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            # For cross-compiled ARM64, the binary is already stripped by cross
            echo "Binary built with cross, stripping may not be necessary"
          elif [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            # For cross-compiled ARM32, the binary is already stripped by cross
            echo "Binary built with cross, stripping may not be necessary"
          elif command -v strip &> /dev/null; then
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || echo "Strip failed, continuing..."
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create ZIP archives
        run: |
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              cd "$dir"
              # Find the binary file (exclude .exe for now)
              if ls ptp-trace.exe &> /dev/null; then
                zip -j "../${dir%/}.zip" ptp-trace.exe
              elif ls ptp-trace &> /dev/null; then
                zip -j "../${dir%/}.zip" ptp-trace
              fi
              cd ..
            fi
          done
          ls -la *.zip

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
